-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Stella.Check.Trans where

import Prelude
import Stella.Ast.AbsSyntax
import Stella.Check.Types

type Result = Either String SType

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transStellaIdent :: StellaIdent -> Result
transStellaIdent x = case x of
  StellaIdent string -> failure x

transExtensionName :: ExtensionName -> Result
transExtensionName x = case x of
  ExtensionName string -> failure x

transMemoryAddress :: MemoryAddress -> Result
transMemoryAddress x = case x of
  MemoryAddress string -> failure x

transProgram :: Program -> Result
transProgram x = case x of
  AProgram pos languagedecl extensions decls -> do
    undefined

transTypeAliasDecls :: StellaIdent -> Type
transTypeAliasDecls = undefined

transLanguageDecl :: LanguageDecl -> Result
transLanguageDecl x = case x of
  LanguageCore pos -> failure x

transExtension :: Extension -> Result
transExtension x = case x of
  AnExtension pos extensionnames -> failure x

transDecl :: Decl -> Result
transDecl x = case x of
  DeclFun pos annotations stellaident paramdecls returntype throwtype decls expr -> failure x
  DeclFunGeneric pos annotations stellaident stellaidents paramdecls returntype throwtype decls expr -> failure x
  DeclTypeAlias pos stellaident type_ -> failure x
  DeclExceptionType pos type_ -> failure x
  DeclExceptionVariant pos stellaident type_ -> failure x

transLocalDecl :: LocalDecl -> Result
transLocalDecl x = case x of
  ALocalDecl pos decl -> failure x

transAnnotation :: Annotation -> Result
transAnnotation x = case x of
  InlineAnnotation pos -> failure x

transParamDecl :: ParamDecl -> Result
transParamDecl x = case x of
  AParamDecl pos stellaident type_ -> failure x

transReturnType :: ReturnType -> Result
transReturnType x = case x of
  NoReturnType pos -> failure x
  SomeReturnType pos type_ -> failure x

transThrowType :: ThrowType -> Result
transThrowType x = case x of
  NoThrowType pos -> failure x
  SomeThrowType pos types -> failure x

transType :: Type -> Result
transType x = case x of
  TypeFun pos types retType -> do
    argsTypes <- traverse transType types
    returnType <- transType retType
    pure $ FuncType FuncTypeData
      { argsType = argsTypes
      , returnType = returnType
      }
  TypeForAll pos stellaidents type_ -> failure x
  TypeRec pos stellaident type_ -> failure x
  TypeSum pos type_1 type_2 -> failure x
  TypeTuple pos types -> failure x
  TypeRecord pos recordfieldtypes -> failure x
  TypeVariant pos variantfieldtypes -> failure x
  TypeList pos type_ -> do
    innerType <- transType type_
    pure $ ListType innerType
  TypeBool pos -> pure $ SimpleType Boolean
  TypeNat  pos-> pure $ SimpleType Nat
  TypeUnit pos -> pure $ SimpleType Unit
  TypeTop pos -> failure x
  TypeBottom pos -> failure x
  TypeRef pos type_ -> failure x
  TypeVar pos (StellaIdent name) -> pure $ TypeVarType name

transMatchCase :: MatchCase -> Result
transMatchCase x = case x of
  AMatchCase pos pattern_ expr -> failure x

transOptionalTyping :: OptionalTyping -> Result
transOptionalTyping x = case x of
  NoTyping  pos-> failure x
  SomeTyping  pos type_ -> failure x

transPatternData :: PatternData -> Result
transPatternData x = case x of
  NoPatternData pos-> failure x
  SomePatternData  pos pattern_ -> failure x

transExprData :: ExprData -> Result
transExprData x = case x of
  NoExprData pos -> failure x
  SomeExprData  pos expr -> failure x

transPattern :: Pattern -> Result
transPattern x = case x of
  PatternVariant pos stellaident patterndata -> failure x
  PatternInl pos pattern_ -> failure x
  PatternInr pos pattern_ -> failure x
  PatternTuple pos patterns -> failure x
  PatternRecord pos labelledpatterns -> failure x
  PatternList pos patterns -> failure x
  PatternCons pos pattern_1 pattern_2 -> failure x
  PatternFalse pos -> failure x
  PatternTrue pos -> failure x
  PatternUnit pos -> failure x
  PatternInt pos integer -> failure x
  PatternSucc pos pattern_ -> failure x
  PatternVar pos stellaident -> failure x

transLabelledPattern :: LabelledPattern -> Result
transLabelledPattern x = case x of
  ALabelledPattern pos stellaident pattern_ -> failure x

transBinding :: Binding -> Result
transBinding x = case x of
  ABinding pos stellaident expr -> failure x

transExpr :: Expr -> Result
transExpr x = case x of
  Sequence pos expr1 expr2 -> failure x
  Assign pos expr1 expr2 -> failure x
  If pos expr1 expr2 expr3 -> failure x
  Let pos patternbindings expr -> failure x
  LetRec pos patternbindings expr -> failure x
  TypeAbstraction pos stellaidents expr -> failure x
  LessThan pos expr1 expr2 -> failure x
  LessThanOrEqual pos expr1 expr2 -> failure x
  GreaterThan pos expr1 expr2 -> failure x
  GreaterThanOrEqual pos expr1 expr2 -> failure x
  Equal pos expr1 expr2 -> failure x
  NotEqual pos expr1 expr2 -> failure x
  TypeAsc pos expr type_ -> failure x
  TypeCast pos expr type_ -> failure x
  Abstraction pos paramdecls expr -> failure x
  Variant pos stellaident exprdata -> failure x
  Match pos expr matchcases -> failure x
  List pos exprs -> failure x
  Add pos expr1 expr2 -> failure x
  Subtract pos expr1 expr2 -> failure x
  LogicOr pos expr1 expr2 -> failure x
  Multiply pos expr1 expr2 -> failure x
  Divide pos expr1 expr2 -> failure x
  LogicAnd pos expr1 expr2 -> failure x
  Ref pos expr -> failure x
  Deref pos expr -> failure x
  Application pos expr exprs -> failure x
  TypeApplication pos expr types -> failure x
  DotRecord pos expr stellaident -> failure x
  DotTuple pos expr integer -> failure x
  Tuple pos exprs -> failure x
  Record pos bindings -> failure x
  ConsList pos expr1 expr2 -> failure x
  Head pos expr -> failure x
  IsEmpty pos expr -> failure x
  Tail pos expr -> failure x
  Panic pos -> failure x
  Throw pos expr -> failure x
  TryCatch pos expr1 pattern_ expr2 -> failure x
  TryWith pos expr1 expr2 -> failure x
  Inl pos expr -> failure x
  Inr pos expr -> failure x
  Succ pos expr -> failure x
  LogicNot pos expr -> failure x
  Pred pos expr -> failure x
  IsZero pos expr -> failure x
  Fix pos expr -> failure x
  NatRec pos expr1 expr2 expr3 -> failure x
  Fold pos type_ expr -> failure x
  Unfold pos type_ expr -> failure x
  ConstTrue pos -> Right $ SimpleType Boolean
  ConstFalse pos -> Right $ SimpleType Boolean
  ConstUnit pos -> Right $ SimpleType Unit
  ConstInt pos integer -> failure x
  ConstMemory pos memoryaddress -> failure x
  Var pos stellaident -> failure x

transPatternBinding :: PatternBinding -> Result
transPatternBinding x = case x of
  APatternBinding pos pattern_ expr -> failure x

transVariantFieldType :: VariantFieldType -> Result
transVariantFieldType x = case x of
  AVariantFieldType pos stellaident optionaltyping -> failure x

transRecordFieldType :: RecordFieldType -> Result
transRecordFieldType x = case x of
  ARecordFieldType pos stellaident type_ -> failure x

transTyping :: Typing -> Result
transTyping x = case x of
  ATyping pos expr type_ -> failure x
