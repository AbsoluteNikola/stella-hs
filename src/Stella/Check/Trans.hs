-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Stella.Check.Trans where

import Prelude
import Stella.Ast.AbsSyntax

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transStellaIdent :: StellaIdent -> Result
transStellaIdent x = case x of
  StellaIdent string -> failure x

transExtensionName :: ExtensionName -> Result
transExtensionName x = case x of
  ExtensionName string -> failure x

transMemoryAddress :: MemoryAddress -> Result
transMemoryAddress x = case x of
  MemoryAddress string -> failure x

transProgram :: Program -> Result
transProgram x = case x of
  AProgram languagedecl extensions decls -> failure x

transLanguageDecl :: LanguageDecl -> Result
transLanguageDecl x = case x of
  LanguageCore -> failure x

transExtension :: Extension -> Result
transExtension x = case x of
  AnExtension extensionnames -> failure x

transDecl :: Decl -> Result
transDecl x = case x of
  DeclFun annotations stellaident paramdecls returntype throwtype decls expr -> failure x
  DeclFunGeneric annotations stellaident stellaidents paramdecls returntype throwtype decls expr -> failure x
  DeclTypeAlias stellaident type_ -> failure x
  DeclExceptionType type_ -> failure x
  DeclExceptionVariant stellaident type_ -> failure x

transLocalDecl :: LocalDecl -> Result
transLocalDecl x = case x of
  ALocalDecl decl -> failure x

transAnnotation :: Annotation -> Result
transAnnotation x = case x of
  InlineAnnotation -> failure x

transParamDecl :: ParamDecl -> Result
transParamDecl x = case x of
  AParamDecl stellaident type_ -> failure x

transReturnType :: ReturnType -> Result
transReturnType x = case x of
  NoReturnType -> failure x
  SomeReturnType type_ -> failure x

transThrowType :: ThrowType -> Result
transThrowType x = case x of
  NoThrowType -> failure x
  SomeThrowType types -> failure x

transType :: Type -> Result
transType x = case x of
  TypeFun types type_ -> failure x
  TypeForAll stellaidents type_ -> failure x
  TypeRec stellaident type_ -> failure x
  TypeSum type_1 type_2 -> failure x
  TypeTuple types -> failure x
  TypeRecord recordfieldtypes -> failure x
  TypeVariant variantfieldtypes -> failure x
  TypeList type_ -> failure x
  TypeBool -> failure x
  TypeNat -> failure x
  TypeUnit -> failure x
  TypeTop -> failure x
  TypeBottom -> failure x
  TypeRef type_ -> failure x
  TypeVar stellaident -> failure x

transMatchCase :: MatchCase -> Result
transMatchCase x = case x of
  AMatchCase pattern_ expr -> failure x

transOptionalTyping :: OptionalTyping -> Result
transOptionalTyping x = case x of
  NoTyping -> failure x
  SomeTyping type_ -> failure x

transPatternData :: PatternData -> Result
transPatternData x = case x of
  NoPatternData -> failure x
  SomePatternData pattern_ -> failure x

transExprData :: ExprData -> Result
transExprData x = case x of
  NoExprData -> failure x
  SomeExprData expr -> failure x

transPattern :: Pattern -> Result
transPattern x = case x of
  PatternVariant stellaident patterndata -> failure x
  PatternInl pattern_ -> failure x
  PatternInr pattern_ -> failure x
  PatternTuple patterns -> failure x
  PatternRecord labelledpatterns -> failure x
  PatternList patterns -> failure x
  PatternCons pattern_1 pattern_2 -> failure x
  PatternFalse -> failure x
  PatternTrue -> failure x
  PatternUnit -> failure x
  PatternInt integer -> failure x
  PatternSucc pattern_ -> failure x
  PatternVar stellaident -> failure x

transLabelledPattern :: LabelledPattern -> Result
transLabelledPattern x = case x of
  ALabelledPattern stellaident pattern_ -> failure x

transBinding :: Binding -> Result
transBinding x = case x of
  ABinding stellaident expr -> failure x

transExpr :: Expr -> Result
transExpr x = case x of
  Sequence expr1 expr2 -> failure x
  Assign expr1 expr2 -> failure x
  If expr1 expr2 expr3 -> failure x
  Let patternbindings expr -> failure x
  LetRec patternbindings expr -> failure x
  TypeAbstraction stellaidents expr -> failure x
  LessThan expr1 expr2 -> failure x
  LessThanOrEqual expr1 expr2 -> failure x
  GreaterThan expr1 expr2 -> failure x
  GreaterThanOrEqual expr1 expr2 -> failure x
  Equal expr1 expr2 -> failure x
  NotEqual expr1 expr2 -> failure x
  TypeAsc expr type_ -> failure x
  TypeCast expr type_ -> failure x
  Abstraction paramdecls expr -> failure x
  Variant stellaident exprdata -> failure x
  Match expr matchcases -> failure x
  List exprs -> failure x
  Add expr1 expr2 -> failure x
  Subtract expr1 expr2 -> failure x
  LogicOr expr1 expr2 -> failure x
  Multiply expr1 expr2 -> failure x
  Divide expr1 expr2 -> failure x
  LogicAnd expr1 expr2 -> failure x
  Ref expr -> failure x
  Deref expr -> failure x
  Application expr exprs -> failure x
  TypeApplication expr types -> failure x
  DotRecord expr stellaident -> failure x
  DotTuple expr integer -> failure x
  Tuple exprs -> failure x
  Record bindings -> failure x
  ConsList expr1 expr2 -> failure x
  Head expr -> failure x
  IsEmpty expr -> failure x
  Tail expr -> failure x
  Panic -> failure x
  Throw expr -> failure x
  TryCatch expr1 pattern_ expr2 -> failure x
  TryWith expr1 expr2 -> failure x
  Inl expr -> failure x
  Inr expr -> failure x
  Succ expr -> failure x
  LogicNot expr -> failure x
  Pred expr -> failure x
  IsZero expr -> failure x
  Fix expr -> failure x
  NatRec expr1 expr2 expr3 -> failure x
  Fold type_ expr -> failure x
  Unfold type_ expr -> failure x
  ConstTrue -> failure x
  ConstFalse -> failure x
  ConstUnit -> failure x
  ConstInt integer -> failure x
  ConstMemory memoryaddress -> failure x
  Var stellaident -> failure x

transPatternBinding :: PatternBinding -> Result
transPatternBinding x = case x of
  APatternBinding pattern_ expr -> failure x

transVariantFieldType :: VariantFieldType -> Result
transVariantFieldType x = case x of
  AVariantFieldType stellaident optionaltyping -> failure x

transRecordFieldType :: RecordFieldType -> Result
transRecordFieldType x = case x of
  ARecordFieldType stellaident type_ -> failure x

transTyping :: Typing -> Result
transTyping x = case x of
  ATyping expr type_ -> failure x
