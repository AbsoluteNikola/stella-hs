-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Stella.

module Stella.Ast.PrintSyntax where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Stella.Ast.AbsSyntax
import qualified Data.Text

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Stella.Ast.AbsSyntax.StellaIdent where
  prt _ (Stella.Ast.AbsSyntax.StellaIdent i) = doc $ showString (Data.Text.unpack i)
instance Print Stella.Ast.AbsSyntax.ExtensionName where
  prt _ (Stella.Ast.AbsSyntax.ExtensionName i) = doc $ showString (Data.Text.unpack i)
instance Print Stella.Ast.AbsSyntax.MemoryAddress where
  prt _ (Stella.Ast.AbsSyntax.MemoryAddress i) = doc $ showString (Data.Text.unpack i)
instance Print (Stella.Ast.AbsSyntax.Program' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.AProgram _ languagedecl extensions decls -> prPrec i 0 (concatD [prt 0 languagedecl, prt 0 extensions, prt 0 decls])

instance Print [Stella.Ast.AbsSyntax.StellaIdent] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.LanguageDecl' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.LanguageCore _ -> prPrec i 0 (concatD [doc (showString "language"), doc (showString "core"), doc (showString ";")])

instance Print (Stella.Ast.AbsSyntax.Extension' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.AnExtension _ extensionnames -> prPrec i 0 (concatD [doc (showString "extend"), doc (showString "with"), prt 0 extensionnames])

instance Print [Stella.Ast.AbsSyntax.ExtensionName] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Stella.Ast.AbsSyntax.Extension' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.Decl' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.DeclFun _ annotations stellaident paramdecls returntype throwtype decls expr -> prPrec i 0 (concatD [prt 0 annotations, doc (showString "fn"), prt 0 stellaident, doc (showString "("), prt 0 paramdecls, doc (showString ")"), prt 0 returntype, prt 0 throwtype, doc (showString "{"), prt 0 decls, doc (showString "return"), prt 0 expr, doc (showString "}")])
    Stella.Ast.AbsSyntax.DeclFunGeneric _ annotations stellaident stellaidents paramdecls returntype throwtype decls expr -> prPrec i 0 (concatD [prt 0 annotations, doc (showString "generic"), doc (showString "fn"), prt 0 stellaident, doc (showString "["), prt 0 stellaidents, doc (showString "]"), doc (showString "("), prt 0 paramdecls, doc (showString ")"), prt 0 returntype, prt 0 throwtype, doc (showString "{"), prt 0 decls, doc (showString "return"), prt 0 expr, doc (showString "}")])
    Stella.Ast.AbsSyntax.DeclTypeAlias _ stellaident type_ -> prPrec i 0 (concatD [doc (showString "type"), prt 0 stellaident, doc (showString "="), prt 0 type_])
    Stella.Ast.AbsSyntax.DeclExceptionType _ type_ -> prPrec i 0 (concatD [doc (showString "exception"), doc (showString "type"), doc (showString "="), prt 0 type_])
    Stella.Ast.AbsSyntax.DeclExceptionVariant _ stellaident type_ -> prPrec i 0 (concatD [doc (showString "exception"), doc (showString "variant"), prt 0 stellaident, doc (showString ":"), prt 0 type_])

instance Print [Stella.Ast.AbsSyntax.Decl' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.LocalDecl' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.ALocalDecl _ decl -> prPrec i 0 (concatD [prt 0 decl])

instance Print [Stella.Ast.AbsSyntax.LocalDecl' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.Annotation' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.InlineAnnotation _ -> prPrec i 0 (concatD [doc (showString "inline")])

instance Print [Stella.Ast.AbsSyntax.Annotation' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.ParamDecl' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.AParamDecl _ stellaident type_ -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString ":"), prt 0 type_])

instance Print [Stella.Ast.AbsSyntax.ParamDecl' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.ReturnType' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.NoReturnType _ -> prPrec i 0 (concatD [])
    Stella.Ast.AbsSyntax.SomeReturnType _ type_ -> prPrec i 0 (concatD [doc (showString "->"), prt 0 type_])

instance Print (Stella.Ast.AbsSyntax.ThrowType' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.NoThrowType _ -> prPrec i 0 (concatD [])
    Stella.Ast.AbsSyntax.SomeThrowType _ types -> prPrec i 0 (concatD [doc (showString "throws"), prt 9 types])

instance Print (Stella.Ast.AbsSyntax.Type' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.TypeFun _ types type_ -> prPrec i 0 (concatD [doc (showString "fn"), doc (showString "("), prt 0 types, doc (showString ")"), doc (showString "->"), prt 0 type_])
    Stella.Ast.AbsSyntax.TypeForAll _ stellaidents type_ -> prPrec i 0 (concatD [doc (showString "forall"), prt 0 stellaidents, doc (showString "."), prt 0 type_])
    Stella.Ast.AbsSyntax.TypeRec _ stellaident type_ -> prPrec i 0 (concatD [doc (showString "\181"), prt 0 stellaident, doc (showString "."), prt 0 type_])
    Stella.Ast.AbsSyntax.TypeSum _ type_1 type_2 -> prPrec i 1 (concatD [prt 2 type_1, doc (showString "+"), prt 2 type_2])
    Stella.Ast.AbsSyntax.TypeTuple _ types -> prPrec i 2 (concatD [doc (showString "{"), prt 0 types, doc (showString "}")])
    Stella.Ast.AbsSyntax.TypeRecord _ recordfieldtypes -> prPrec i 2 (concatD [doc (showString "{"), prt 0 recordfieldtypes, doc (showString "}")])
    Stella.Ast.AbsSyntax.TypeVariant _ variantfieldtypes -> prPrec i 2 (concatD [doc (showString "<|"), prt 0 variantfieldtypes, doc (showString "|>")])
    Stella.Ast.AbsSyntax.TypeList _ type_ -> prPrec i 2 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    Stella.Ast.AbsSyntax.TypeBool _ -> prPrec i 3 (concatD [doc (showString "Bool")])
    Stella.Ast.AbsSyntax.TypeNat _ -> prPrec i 3 (concatD [doc (showString "Nat")])
    Stella.Ast.AbsSyntax.TypeUnit _ -> prPrec i 3 (concatD [doc (showString "Unit")])
    Stella.Ast.AbsSyntax.TypeTop _ -> prPrec i 3 (concatD [doc (showString "Top")])
    Stella.Ast.AbsSyntax.TypeBottom _ -> prPrec i 3 (concatD [doc (showString "Bot")])
    Stella.Ast.AbsSyntax.TypeRef _ type_ -> prPrec i 3 (concatD [doc (showString "&"), prt 2 type_])
    Stella.Ast.AbsSyntax.TypeVar _ stellaident -> prPrec i 3 (concatD [prt 0 stellaident])

instance Print [Stella.Ast.AbsSyntax.Type' a] where
  prt 9 [x] = concatD [prt 9 x]
  prt 9 (x:xs) = concatD [prt 9 x, doc (showString ","), prt 9 xs]
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.MatchCase' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.AMatchCase _ pattern_ expr -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "=>"), prt 0 expr])

instance Print [Stella.Ast.AbsSyntax.MatchCase' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.OptionalTyping' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.NoTyping _ -> prPrec i 0 (concatD [])
    Stella.Ast.AbsSyntax.SomeTyping _ type_ -> prPrec i 0 (concatD [doc (showString ":"), prt 0 type_])

instance Print (Stella.Ast.AbsSyntax.PatternData' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.NoPatternData _ -> prPrec i 0 (concatD [])
    Stella.Ast.AbsSyntax.SomePatternData _ pattern_ -> prPrec i 0 (concatD [doc (showString "="), prt 0 pattern_])

instance Print (Stella.Ast.AbsSyntax.ExprData' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.NoExprData _ -> prPrec i 0 (concatD [])
    Stella.Ast.AbsSyntax.SomeExprData _ expr -> prPrec i 0 (concatD [doc (showString "="), prt 0 expr])

instance Print (Stella.Ast.AbsSyntax.Pattern' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.PatternAsc _ pattern_ type_ -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "as"), prt 0 type_])
    Stella.Ast.AbsSyntax.PatternVariant _ stellaident patterndata -> prPrec i 0 (concatD [doc (showString "<|"), prt 0 stellaident, prt 0 patterndata, doc (showString "|>")])
    Stella.Ast.AbsSyntax.PatternInl _ pattern_ -> prPrec i 0 (concatD [doc (showString "inl"), doc (showString "("), prt 0 pattern_, doc (showString ")")])
    Stella.Ast.AbsSyntax.PatternInr _ pattern_ -> prPrec i 0 (concatD [doc (showString "inr"), doc (showString "("), prt 0 pattern_, doc (showString ")")])
    Stella.Ast.AbsSyntax.PatternTuple _ patterns -> prPrec i 0 (concatD [doc (showString "{"), prt 0 patterns, doc (showString "}")])
    Stella.Ast.AbsSyntax.PatternRecord _ labelledpatterns -> prPrec i 0 (concatD [doc (showString "{"), prt 0 labelledpatterns, doc (showString "}")])
    Stella.Ast.AbsSyntax.PatternList _ patterns -> prPrec i 0 (concatD [doc (showString "["), prt 0 patterns, doc (showString "]")])
    Stella.Ast.AbsSyntax.PatternCons _ pattern_1 pattern_2 -> prPrec i 0 (concatD [doc (showString "cons"), doc (showString "("), prt 0 pattern_1, doc (showString ","), prt 0 pattern_2, doc (showString ")")])
    Stella.Ast.AbsSyntax.PatternFalse _ -> prPrec i 0 (concatD [doc (showString "false")])
    Stella.Ast.AbsSyntax.PatternTrue _ -> prPrec i 0 (concatD [doc (showString "true")])
    Stella.Ast.AbsSyntax.PatternUnit _ -> prPrec i 0 (concatD [doc (showString "unit")])
    Stella.Ast.AbsSyntax.PatternInt _ n -> prPrec i 0 (concatD [prt 0 n])
    Stella.Ast.AbsSyntax.PatternSucc _ pattern_ -> prPrec i 0 (concatD [doc (showString "succ"), doc (showString "("), prt 0 pattern_, doc (showString ")")])
    Stella.Ast.AbsSyntax.PatternVar _ stellaident -> prPrec i 0 (concatD [prt 0 stellaident])

instance Print [Stella.Ast.AbsSyntax.Pattern' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.LabelledPattern' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.ALabelledPattern _ stellaident pattern_ -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString "="), prt 0 pattern_])

instance Print [Stella.Ast.AbsSyntax.LabelledPattern' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.Binding' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.ABinding _ stellaident expr -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString "="), prt 0 expr])

instance Print [Stella.Ast.AbsSyntax.Binding' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.Expr' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.Sequence _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString ";"), prt 0 expr2])
    Stella.Ast.AbsSyntax.Assign _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString ":="), prt 1 expr2])
    Stella.Ast.AbsSyntax.If _ expr1 expr2 expr3 -> prPrec i 1 (concatD [doc (showString "if"), prt 1 expr1, doc (showString "then"), prt 1 expr2, doc (showString "else"), prt 1 expr3])
    Stella.Ast.AbsSyntax.Let _ patternbindings expr -> prPrec i 0 (concatD [doc (showString "let"), prt 0 patternbindings, doc (showString "in"), prt 0 expr])
    Stella.Ast.AbsSyntax.LetRec _ patternbindings expr -> prPrec i 0 (concatD [doc (showString "letrec"), prt 0 patternbindings, doc (showString "in"), prt 0 expr])
    Stella.Ast.AbsSyntax.TypeAbstraction _ stellaidents expr -> prPrec i 0 (concatD [doc (showString "generic"), doc (showString "["), prt 0 stellaidents, doc (showString "]"), prt 0 expr])
    Stella.Ast.AbsSyntax.LessThan _ expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "<"), prt 3 expr2])
    Stella.Ast.AbsSyntax.LessThanOrEqual _ expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "<="), prt 3 expr2])
    Stella.Ast.AbsSyntax.GreaterThan _ expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString ">"), prt 3 expr2])
    Stella.Ast.AbsSyntax.GreaterThanOrEqual _ expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString ">="), prt 3 expr2])
    Stella.Ast.AbsSyntax.Equal _ expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "=="), prt 3 expr2])
    Stella.Ast.AbsSyntax.NotEqual _ expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString "!="), prt 3 expr2])
    Stella.Ast.AbsSyntax.TypeAsc _ expr type_ -> prPrec i 3 (concatD [prt 3 expr, doc (showString "as"), prt 2 type_])
    Stella.Ast.AbsSyntax.TypeCast _ expr type_ -> prPrec i 3 (concatD [prt 3 expr, doc (showString "cast"), doc (showString "as"), prt 2 type_])
    Stella.Ast.AbsSyntax.Abstraction _ paramdecls expr -> prPrec i 3 (concatD [doc (showString "fn"), doc (showString "("), prt 0 paramdecls, doc (showString ")"), doc (showString "{"), doc (showString "return"), prt 0 expr, doc (showString "}")])
    Stella.Ast.AbsSyntax.Variant _ stellaident exprdata -> prPrec i 3 (concatD [doc (showString "<|"), prt 0 stellaident, prt 0 exprdata, doc (showString "|>")])
    Stella.Ast.AbsSyntax.Match _ expr matchcases -> prPrec i 3 (concatD [doc (showString "match"), prt 2 expr, doc (showString "{"), prt 0 matchcases, doc (showString "}")])
    Stella.Ast.AbsSyntax.List _ exprs -> prPrec i 3 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])
    Stella.Ast.AbsSyntax.Add _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "+"), prt 4 expr2])
    Stella.Ast.AbsSyntax.Subtract _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "-"), prt 4 expr2])
    Stella.Ast.AbsSyntax.LogicOr _ expr1 expr2 -> prPrec i 3 (concatD [prt 3 expr1, doc (showString "or"), prt 4 expr2])
    Stella.Ast.AbsSyntax.Multiply _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "*"), prt 5 expr2])
    Stella.Ast.AbsSyntax.Divide _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "/"), prt 5 expr2])
    Stella.Ast.AbsSyntax.LogicAnd _ expr1 expr2 -> prPrec i 4 (concatD [prt 4 expr1, doc (showString "and"), prt 5 expr2])
    Stella.Ast.AbsSyntax.Ref _ expr -> prPrec i 5 (concatD [doc (showString "new"), doc (showString "("), prt 5 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.Deref _ expr -> prPrec i 5 (concatD [doc (showString "*"), prt 5 expr])
    Stella.Ast.AbsSyntax.Application _ expr exprs -> prPrec i 6 (concatD [prt 6 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Stella.Ast.AbsSyntax.TypeApplication _ expr types -> prPrec i 6 (concatD [prt 6 expr, doc (showString "["), prt 0 types, doc (showString "]")])
    Stella.Ast.AbsSyntax.DotRecord _ expr stellaident -> prPrec i 6 (concatD [prt 6 expr, doc (showString "."), prt 0 stellaident])
    Stella.Ast.AbsSyntax.DotTuple _ expr n -> prPrec i 6 (concatD [prt 6 expr, doc (showString "."), prt 0 n])
    Stella.Ast.AbsSyntax.Tuple _ exprs -> prPrec i 6 (concatD [doc (showString "{"), prt 0 exprs, doc (showString "}")])
    Stella.Ast.AbsSyntax.Record _ bindings -> prPrec i 6 (concatD [doc (showString "{"), prt 0 bindings, doc (showString "}")])
    Stella.Ast.AbsSyntax.ConsList _ expr1 expr2 -> prPrec i 6 (concatD [doc (showString "cons"), doc (showString "("), prt 0 expr1, doc (showString ","), prt 0 expr2, doc (showString ")")])
    Stella.Ast.AbsSyntax.Head _ expr -> prPrec i 6 (concatD [doc (showString "List::head"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.IsEmpty _ expr -> prPrec i 6 (concatD [doc (showString "List::isempty"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.Tail _ expr -> prPrec i 6 (concatD [doc (showString "List::tail"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.Panic _ -> prPrec i 6 (concatD [doc (showString "panic!")])
    Stella.Ast.AbsSyntax.Throw _ expr -> prPrec i 6 (concatD [doc (showString "throw"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.TryCatch _ expr1 pattern_ expr2 -> prPrec i 6 (concatD [doc (showString "try"), doc (showString "{"), prt 0 expr1, doc (showString "}"), doc (showString "catch"), doc (showString "{"), prt 0 pattern_, doc (showString "=>"), prt 0 expr2, doc (showString "}")])
    Stella.Ast.AbsSyntax.TryWith _ expr1 expr2 -> prPrec i 6 (concatD [doc (showString "try"), doc (showString "{"), prt 0 expr1, doc (showString "}"), doc (showString "with"), doc (showString "{"), prt 0 expr2, doc (showString "}")])
    Stella.Ast.AbsSyntax.Inl _ expr -> prPrec i 6 (concatD [doc (showString "inl"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.Inr _ expr -> prPrec i 6 (concatD [doc (showString "inr"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.Succ _ expr -> prPrec i 6 (concatD [doc (showString "succ"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.LogicNot _ expr -> prPrec i 6 (concatD [doc (showString "not"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.Pred _ expr -> prPrec i 6 (concatD [doc (showString "Nat::pred"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.IsZero _ expr -> prPrec i 6 (concatD [doc (showString "Nat::iszero"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.Fix _ expr -> prPrec i 6 (concatD [doc (showString "fix"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Stella.Ast.AbsSyntax.NatRec _ expr1 expr2 expr3 -> prPrec i 6 (concatD [doc (showString "Nat::rec"), doc (showString "("), prt 0 expr1, doc (showString ","), prt 0 expr2, doc (showString ","), prt 0 expr3, doc (showString ")")])
    Stella.Ast.AbsSyntax.Fold _ type_ expr -> prPrec i 6 (concatD [doc (showString "fold"), doc (showString "["), prt 0 type_, doc (showString "]"), prt 7 expr])
    Stella.Ast.AbsSyntax.Unfold _ type_ expr -> prPrec i 6 (concatD [doc (showString "unfold"), doc (showString "["), prt 0 type_, doc (showString "]"), prt 7 expr])
    Stella.Ast.AbsSyntax.ConstTrue _ -> prPrec i 7 (concatD [doc (showString "true")])
    Stella.Ast.AbsSyntax.ConstFalse _ -> prPrec i 7 (concatD [doc (showString "false")])
    Stella.Ast.AbsSyntax.ConstUnit _ -> prPrec i 7 (concatD [doc (showString "unit")])
    Stella.Ast.AbsSyntax.ConstInt _ n -> prPrec i 7 (concatD [prt 0 n])
    Stella.Ast.AbsSyntax.ConstMemory _ memoryaddress -> prPrec i 7 (concatD [prt 0 memoryaddress])
    Stella.Ast.AbsSyntax.Var _ stellaident -> prPrec i 7 (concatD [prt 0 stellaident])

instance Print [Stella.Ast.AbsSyntax.Expr' a] where
  prt 2 [x] = concatD [prt 2 x, doc (showString ";")]
  prt 2 (x:xs) = concatD [prt 2 x, doc (showString ";"), prt 2 xs]
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.PatternBinding' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.APatternBinding _ pattern_ expr -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "="), prt 0 expr])

instance Print [Stella.Ast.AbsSyntax.PatternBinding' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.VariantFieldType' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.AVariantFieldType _ stellaident optionaltyping -> prPrec i 0 (concatD [prt 0 stellaident, prt 0 optionaltyping])

instance Print [Stella.Ast.AbsSyntax.VariantFieldType' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.RecordFieldType' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.ARecordFieldType _ stellaident type_ -> prPrec i 0 (concatD [prt 0 stellaident, doc (showString ":"), prt 0 type_])

instance Print [Stella.Ast.AbsSyntax.RecordFieldType' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (Stella.Ast.AbsSyntax.Typing' a) where
  prt i = \case
    Stella.Ast.AbsSyntax.ATyping _ expr type_ -> prPrec i 0 (concatD [prt 0 expr, doc (showString ":"), prt 0 type_])
